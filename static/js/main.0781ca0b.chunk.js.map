{"version":3,"sources":["components/Navbar/Navbar.js","components/Hero/img/ph-dash-op(1).webp","components/Hero/Hero.js","components/Discover/train.svg","components/Discover/Discover.js","screens/Home/Home.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Navbar","className","Hero","heroRef","React","useRef","titleRef","redText","useState","img","setImg","useEffect","window","innerWidth","gsap","from","x","scale","duration","y","opacity","stagger","ref","href","src","heroImg","loading","alt","Discover","disTitle","disPara","disImg","current","scrollTrigger","target","bic","Brands","lazy","Book","Footer","Home","fallback","App","registerPlugin","ScrollTrigger","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0781ca0b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './navbar.css'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"nav-content\">\r\n            <div className=\"brand\">\r\n               <h1 className=\"logo\">\r\n                   Trainer </h1>\r\n            </div>\r\n\r\n            <ul className=\"nav-links\">\r\n             <li className=\"nav-link\">Blog</li>   \r\n             <li className=\"nav-link\">Contact us</li>   \r\n            </ul>\r\n\r\n            <div className=\"btn-md\">Get the app</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","export default __webpack_public_path__ + \"static/media/ph-dash-op(1).cf9dfe7a.webp\";","import React from 'react'\r\n\r\nimport gsap from 'gsap'\r\nimport './hero.css'\r\nimport heroImg from './img/ph-dash-op(1).webp'\r\n\r\nconst Hero = () => {\r\n\r\n    const heroRef = React.useRef(null)\r\n    const titleRef = React.useRef(null)\r\n    const redText = React.useRef(null)\r\n    const [img, setImg] = React.useState(true)\r\n\r\n    React.useEffect(()=>{ \r\n      \r\n        if(window.innerWidth < 576){\r\n            setImg(false)\r\n            // console.log(img)\r\n        } else {\r\n            gsap.from(\".main-img\",{x:100,scale:0,duration:.3})\r\n            gsap.from(\".title\",{y:30,opacity:0,stagger:.1,duration:.75})\r\n\r\n        }\r\n        // if( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {\r\n        //     // some code..\r\n        //     setImg(false)\r\n        // }\r\n    },[img])\r\n    const showImg = () => {\r\n        if(img){\r\n            return( \r\n                <div className=\"main-img active\" ref={heroRef}>\r\n                 <img src={heroImg} loading=\"lazy\" alt=\"\"/>\r\n                </div> )\r\n             } else{\r\n                return( \r\n                    <div ref={heroRef}>\r\n                     {/* <img src={heroImg} loading=\"lazy\" alt=\"\"/> */}\r\n                    </div> )\r\n             }\r\n    }\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"main-content\">\r\n                <div className=\"main-text\">\r\n                <h1 className=\"main-title\">\r\n                    <span className=\"red-text title\" ref={redText}>T</span>\r\n                    <span className=\"red-text title\">r</span>\r\n                    <span className=\"red-text title\">a</span>\r\n                    <span className=\"red-text title\">i</span>\r\n                    <span className=\"red-text  title last\">n</span>\r\n                    <span className=\"title\" ref={titleRef}>  with</span>\r\n                    <br/> \r\n                     <span className=\"title sub\" ref={titleRef}>the</span>\r\n                    <span className=\"title sub\" ref={titleRef}>best</span> \r\n                </h1>\r\n                <a href=\"/training-site\" className=\"btn btn-light title\">\r\n                    Get the app\r\n                </a>\r\n                </div> \r\n                {\r\n                    showImg()\r\n                   \r\n                }  \r\n                {/* <div className=\"main-img active\" ref={heroRef}>\r\n                    <img src={heroImg} loading=\"eager\" alt=\"\"/>\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hero\r\n","export default __webpack_public_path__ + \"static/media/train.deae75c2.svg\";","import React from 'react'\r\n\r\nimport gsap from 'gsap'\r\n\r\nimport './discover.css'\r\n// import bic from './img/train.webp'\r\nimport bic from './train.svg'\r\n// import dark from './img/dark-bd.jpg'\r\nconst Discover = () => {\r\n    const disTitle = React.useRef(null)\r\n    const disPara = React.useRef(null)\r\n    const disImg = React.useRef(null)\r\n\r\n    React.useEffect(()=>{\r\n        gsap.from(disTitle.current,{x:100,scale:0,duration:.3,scrollTrigger:{target:\".dis-para\"},})\r\n\r\n        gsap.from(disPara.current,{x:100,scrollTrigger:'.dis-para', opacity:0,stagger:.1,duration:.4})\r\n  \r\n        gsap.from(disImg.current,{x:-100,scrollTrigger:'.bic',duration:.4,opacity:0})\r\n  \r\n    },[])\r\n    return (\r\n        <div className=\"discover\">\r\n            <div className=\"discover-content\">\r\n                <div className=\"dis-imgs\">\r\n                    <img src={bic} ref={disImg} loading=\"lazy\" className=\"bic\" alt=\"\"/>\r\n                    {/* <img src={dark} className=\"dark\" alt=\"\"/> */}  \r\n                </div>\r\n                <div className=\"dis-content\">\r\n                    <div className=\"dis-title\">\r\n                          <h2 ref={disTitle}>\r\n                        <span className=\"red-text\">Discover</span> <br/>\r\n                          classes & <br/> Trainer \r\n                          </h2>\r\n                    </div>\r\n                    <div className=\"dis-para\"> \r\n                        <p ref={disPara}> \r\n                             Lorem, ipsum dolor sit amet consectetur \r\n                             adipisicing elit. Non architecto nam perspiciatis laudantium dicta veritatis \r\n    </p>\r\n                  </div>  </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Discover\r\n","import { Fragment, lazy, Suspense } from 'react'\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component'\r\n\r\nimport Navbar from '../../components/Navbar/Navbar'\r\nimport Hero from '../../components/Hero/Hero'\r\nimport Discover from '../../components/Discover/Discover'\r\n\r\nconst Brands = lazy(() => import('../../components/Brands/brands'))\r\nconst Book = lazy(() => import('../../components/Book/Book'))\r\nconst Footer = lazy(() => import('../../components/Footer/Footer'))\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar />\r\n      <Hero />\r\n      <Discover />\r\n      <LazyLoadComponent>\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                      <Fragment>\r\n                              <Brands />\r\n                              <Book />\r\n                              <Footer />\r\n                      </Fragment>\r\n              </Suspense>\r\n      </LazyLoadComponent>\r\n      <div className='space'></div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import './App.css';\nimport Home from './screens/Home/Home';\n\nimport gsap from 'gsap'\nimport { ScrollTrigger } from 'gsap/all';\nfunction App() { \n  gsap.registerPlugin(ScrollTrigger)\n  return <Home />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// repzzzzortWebVitals(console.log);\n"],"sourceRoot":""}